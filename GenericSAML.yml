AWSTemplateFormatVersion: "2010-09-09"
Description: Create a role with SAML trust relationship
Resources:
  SAMLRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}" # Role takes the name given to stack
      Description: "Description of the role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:saml-provider/SAML-PROVIDER-NAME"
            Action: "sts:AssumeRoleWithSAML"
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
        Path: "/" # Optional 
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
          - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
          - 'arn:aws:iam::aws:policy/AWSSupportAccess'
          # Add / Remove based on requirement
        MaxSessionDuration: 3600 # Optional 
        Policies:
          # Following are some sample policies created
          - PolicyName: !Sub "${AWS::StackName}-SSMAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: ssmexecute
                  Effect: Allow
                  Action:
                  - ssm:SendCommand
                  - ssm:StartAutomationExecution
                  Resource:
                  - !Sub arn:aws:ssm:*:${AWS::AccountId}:document/*
                  - arn:aws:ec2:*:*:instance/*
                  - arn:aws:ssm:*:*:managed-instance/*
                  - arn:aws:ssm:*:${AWS::AccountId}:automation-definition*
                  - arn:aws:ssm:*:*:document/AWS*
                  - arn:aws:ssm:*:*:document/Amazon*                        
          - PolicyName: !Sub "${AWS::StackName}-KMSAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - 
                  Effect: Allow
                  Sid : KMSAdmin
                  Action:
                    - "kms:*"
                  Resource: "*"   
          - PolicyName: !Sub "${AWS::StackName}-EBSAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: EBSAdmin
                  Effect: Allow
                  Action:
                  - ec2:DetachVolume
                  - ec2:AttachVolume
                  - ec2:RebootInstances
                  - ec2:ModifyVolume
                  - ec2:ModifyVolumeAttribute
                  - ec2:DeleteTags
                  - ec2:CreateTags
                  - ec2:RunInstances
                  - ec2:StopInstances
                  - ec2:CreateVolume
                  - ec2:ModifySnapshotAttribute
                  - ec2:StartInstances
                  - ec2:ModifyInstanceAttribute
                  Resource: "*"     
          - PolicyName: !Sub "${AWS::StackName}-Deny"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: S3deny
                  Effect: Deny
                  Action:
                    - s3:DeleteBucket
                  Resource: "*"
                - Sid: Sqsdeny
                  Effect: Deny
                  Action:
                    - sqs:Delete*
                  Resource: "*"  
                - Sid: lambdadeny
                  Effect: Deny
                  Action:
                    - lambda:Delete*
                  Resource: "*"  
                - Sid: ELBdeny
                  Effect: Deny
                  Action:
                    - elasticloadbalancing:DeleteLoadBalancer
                  Resource: "*"
                - Sid: EFSdeny
                  Effect: Deny
                  Action:
                    - elasticfilesystem:DeleteFileSystem
                  Resource: "*"
                - Sid: AutoScalingdeny
                  Effect: Deny
                  Action:
                    - autoscaling:BatchDeleteScheduledAction
                    - autoscaling:DeleteAutoScalingGroup
                    - autoscaling:DeleteLaunchConfiguration
                    - autoscaling:DeleteLifecycleHook
                    - autoscaling:DeleteNotificationConfiguration
                    - autoscaling:DeletePolicy
                    - autoscaling:DeleteScheduledAction
                    - autoscaling:DeleteWarmPool
                  Resource: "*"  
                - Sid: EC2deny
                  Effect: Deny
                  Action:
                    - ec2:DeleteClientVpn*
                    - ec2:DeleteCustomerGateway
                    - ec2:DeleteDhcpOptions
                    - ec2:DeleteEgressOnlyInternetGateway
                    - ec2:DeleteFlowLogs
                    - ec2:DeleteInternetGateway
                    - ec2:DeleteNatGateway
                    - ec2:DeleteNetwork*
                    - ec2:DeleteRoute*
                    - ec2:DeleteSubnet
                    - ec2:DeleteSecurityGroup
                    - ec2:DeleteTrafficMirror*
                    - ec2:DeleteTransitGateway*
                    - ec2:DeleteVpc*
                    - ec2:DeleteVpn*              
                  Resource: "*"  
                - Sid: KMSdeny
                  Effect: Deny
                  Action:
                    - kms:DeleteCustomKeyStore
                    - kms:ScheduleKeyDeletion
                    - kms:DeleteImportedKeyMaterial
                    - kms:DeleteAlias
                    - kms:DisableKey
                    - kms:DisableKeyRotation
                  Resource: "*"               